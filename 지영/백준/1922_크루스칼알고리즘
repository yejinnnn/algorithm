import sys

#정점 수 n, 간선 수 m
n=int(sys.stdin.readline())
m=int(sys.stdin.readline())

parent=[0]*(n+1)    #루트 노드를 저장
edges=[]    #간선을 담을 리스트

#부모 테이블에서 부모를 자신의 값으로 초기화
for i in range(1,n+1):
    parent[i]=i

#모든 간선에 대한 정보 받기
for _ in range(m):
    a,b,cost=map(int,sys.stdin.readline().split())
    edges.append((cost,a,b))

def kruskal(edges):
    #간선을 비용 기준으로 정렬
    edges.sort()
    result=0    #최종 비용

    #간선 연결
    for edge in edges:
        if not edge:    #0번째 edge생략
            continue

        cost,a,b=edge

        #사이클이 발생하지 않는 경우에만 포함
        if getParent(a)!=getParent(b):
            unionParent(a,b)
            result+=cost
    return result

def getParent(x):
    if parent[x] == x:
        return x
    else:
        parent[x]=getParent(parent[x])
        return getParent(parent[x])

def unionParent(a, b):
    a=getParent(a)
    b=getParent(b)
    if a==b:
        return
    elif a>b:
        parent[a]=b
    else:
        parent[b]=a

result= kruskal(edges)
print(result)
